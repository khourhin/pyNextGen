# EXAMPLE USAGE 
#

# TOFIX:
# Cannot reuse already created index out of the box. The make_index rule complains that the folder already exists. Workaround is to comment out the make_index rule and "config['star_index']," in targets.

import glob
import os

SAMPLES = config['samples']

print(SAMPLES)

# THis is used so far only for fastqc, and not sure its completely
# safe (snakemake log give weird results for the 'wilcard' entry)
READ_PAIRS = '' if config['pair']=='single' else ['_1','_2']

rule targets:
    input:
        expand('qc/{sample}{read_pairs}_fastqc.html', sample=SAMPLES, read_pairs=READ_PAIRS),
        'multiqc_report.html',
        'featureCount/counts',        
        config['star_index'],
        expand('star/{sample}_pass1_SJ.out.tab', sample=SAMPLES),
        expand('star/{sample}_pass2_Aligned.sortedByCoord.out.bam', sample=SAMPLES),
        expand('star/{sample}_pass2_Aligned.sortedByCoord.out.bam.bai', sample=SAMPLES),
        expand('bigwigs/{sample}_uniqMapper.bw', sample=SAMPLES)
        
rule fastqc:
    input:
        os.path.join(config['fqdir'], '{sample}' + '{read_pairs}' + config['fq_ext'])

    output:
        html = 'qc/{sample}{read_pairs}_fastqc.html',
        zip = 'qc/{sample}{read_pairs}_fastqc.zip'
    params: ''

    shell:
        'fastqc --quiet --outdir qc {input}'

        
rule make_index:
    input:
        fas = config['ref_fasta'],
        gtf = config['gtf']
    output:
        idx_dir = config['star_index']
    threads: 20
    shell:
        'mkdir {output.idx_dir} && STAR --runMode genomeGenerate --genomeDir {output.idx_dir} --genomeFastaFiles {input.fas} 	 --sjdbGTFfile {input.gtf} --runThreadN {threads}'


rule star_pass1:
    input:
        fas = config['ref_fasta'],
        gtf = config['gtf'],
        idx_dir = config['star_index'],
        fqs = [os.path.join(config['fqdir'], '{sample}' + config['fq_ext'])] if config['pair']=='single' else [(os.path.join(config['fqdir'], '{sample}' + num + config['fq_ext']) for num in ('_1', '_2'))]

    output:
        'star/{sample}_pass1_SJ.out.tab'
        
    params:
        extra = config['star'],
        outprefix = 'star/{sample}_pass1_'
        
    threads: 12

    shell:
        'STAR --genomeDir {input.idx_dir} \
	--sjdbGTFfile {input.gtf} \
	--readFilesIn {input.fqs} \
	--outSAMtype None \
	--runThreadN {threads} \
        --outFileNamePrefix {params.outprefix} \
        {params.extra} '


rule star_pass2:
    input:
        fas = config['ref_fasta'],
        gtf = config['gtf'],
        idx_dir = config['star_index'],
        fqs = [os.path.join(config['fqdir'], '{sample}' + config['fq_ext'])] if config['pair']=='single' else [(os.path.join(config['fqdir'], '{sample}' + num +  config['fq_ext']) for num in ('_1', '_2'))],
        juncs = expand('star/{sample}_pass1_SJ.out.tab', sample=SAMPLES)

    output:
        'star/{sample}_pass2_Aligned.sortedByCoord.out.bam',
        
    params:
        extra = config['star'],
        outprefix = 'star/{sample}_pass2_'
        
    threads: 12

    shell:
        'STAR --genomeDir {input.idx_dir} \
	--sjdbGTFfile {input.gtf} \
	--readFilesIn {input.fqs} \
	--outSAMtype BAM SortedByCoordinate \
	--runThreadN {threads} \
        --outFileNamePrefix {params.outprefix} \
	--sjdbFileChrStartEnd {input.juncs} \
	--outSAMattributes All \
	--limitSjdbInsertNsj 2500000 \
        {params.extra}'


rule featureCount:
    input:
        bams = expand('star/{sample}_pass2_Aligned.sortedByCoord.out.bam', sample=SAMPLES),
        gtf = config['gtf']
    output:
        'featureCount/counts'
    log:
        err = 'logs/featureCount_log.err',
        out = 'logs/featureCount_log.out'
    threads: 12
    params:
        defaults = config['featureCount']
    shell:
        'featureCounts -T {threads} {params.defaults} -a {input.gtf} -o {output} {input.bams} 1>> {log.out} 2>> {log.err}'


rule multiqc:
    input:
        'featureCount/counts',
        expand('qc/{sample}{read_pairs}_fastqc.html', sample=SAMPLES, read_pairs=READ_PAIRS),

    output:
        'multiqc_report.html'
    shell:
        'multiqc .'

rule indexing:
    input:
        bam = 'star/{sample}_pass2_Aligned.sortedByCoord.out.bam'

    output:
        bai = 'star/{sample}_pass2_Aligned.sortedByCoord.out.bam.bai'

    shell:
        'samtools index {input.bam}'

        
rule bigwig:
    input:
        bam = 'star/{sample}_pass2_Aligned.sortedByCoord.out.bam',
        bai = 'star/{sample}_pass2_Aligned.sortedByCoord.out.bam.bai'
        
    output:
        bw = 'bigwigs/{sample}_uniqMapper.bw'
        
    threads: 12

    shell:
        'bamCoverage -p {threads} -b {input.bam} -o {output.bw} --minMappingQuality 255'
