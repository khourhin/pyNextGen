# USAGE
#snakemake --cores 20 -s star.sm

# ASSUMPTIONS
# QORTS:
# reads UNSTRANDED AND PAIRED

# QUALIMAP
# reads ARE UNPAIRED
# Java mem size = 30gb

# FEATURECOUNT
# reads ARE UNSTRANDED UNPAIRED, 10 THREADS

# Qorts can ask for a lot of memory if paired with broken pairs (keeps the
# singletons in memory)


################################################################################
#	STUBBY STUB !!!!!                                                      #
################################################################################

import glob
import os

SAMFILES = 'bams/*.bam'
GTF = '/home/ekornobis/data/genomes/ensembl/h_sapiens/hg38/Homo_sapiens.GRCh38.87.gtf'

SAMPLE = [ os.path.basename(x).replace('.bam', '')
           for x in glob.glob(SAMFILES)]

rule targets:
    input:
#        expand('qorts/{sample}', sample=SAMPLE)
        expand('qualimap/{sample}', sample=SAMPLE)

# rule qorts:
#     input:
#         bam = '/home/ekornobis/Programming/pyNextGen/demo_data/{sample}.bam',
#         gtf = GTF
        
#     output:
#         'testing/{sample}'

#     log:
#         err = 'logs/qorts_log.err',
#         out = 'logs/qorts_log.out'
        
#     shell:
#         'qorts -Xmx16g -Xms8g QC {input.bam} {input.gtf} {output} 1>> {log.out} 2>> {log.err}'

        
rule qualimap:
    input:
        bam = 'bams/{sample}.bam',
        gtf = GTF

    output:
        'qualimap/{sample}'
        
    log:
        err = 'logs/qualimap_log.err',
        out = 'logs/qualimap_log.out'

    shell:
        'qualimap rnaseq --java-mem-size=30G -bam {input} -gtf {input.gtf} -outdir {output} 1>> {log.out} 2>> {log.err}'
        
# rule featureCount:
#     input:
#         bam = '/home/ekornobis/Programming/pyNextGen/demo_data/{sample}.bam',
#         gtf = GTF

#     output:
#         'featureCount/{sample}'
        
#     log:
#         err = 'logs/featureCount_log.err',
#         out = 'logs/featureCount_log.out'

#     threads: 10
        
#     shell:
#         'featureCount -s 0 -T {threads} -t exon -g gene_id -a {input.gtf} -o {output}  1>> {log.out} 2>> {log.err}'
    
