# USAGE
# snakemake --cores 4 -s ~/Programming/pyNextGen/snake_make_recipes/post_bam.sm --config sams='bams/SRR22217*' gtf=~/data/genomes/ensembl/h_sapiens/hg37/Homo_sapiens.GRCh37.75.gtf bed=/home/ekornobis/data/genomes/ensembl/h_sapiens/hg37/hg19_refseq_sort.bed

# OR
#snakemake --cores 4 -s post_bam.sm --configfile config_seqherv.json

# ASSUMPTIONS
# QORTS:
# reads UNSTRANDED AND PAIRED
# Otherwise
# --singleEnded
# --stranded
# --stranded_fr_secondstrand # For reversed stranded ?

# QUALIMAP
# reads ARE UNPAIRED
# Java mem size = 30gb

# FEATURECOUNT
# reads ARE UNSTRANDED UNPAIRED, 10 THREADS

# Qorts can ask for a lot of memory if paired with broken pairs (keeps the
# singletons in memory)

import glob
import os

GTF = config['gtf']

SAMPLE = [os.path.splitext(os.path.basename(x))[0]
          for x in glob.glob(os.path.join(config['samdir'], '*bam'))]

print(SAMPLE)


rule targets:
    input:
        'featureCount/counts',
        expand('qorts/{sample}', sample=SAMPLE),
        expand('qualimap/{sample}', sample=SAMPLE),
        'multiqc_report.html'

        #        expand('logs/rseqc_rd_{sample}_log.out', sample=SAMPLE)

        
rule qorts:
    input:
        bam = os.path.join(config['samdir'], '{sample}.bam'),
        gtf = GTF
    output:
        'qorts/{sample}'
    log:
        err = 'logs/qorts_{sample}_log.err',
        out = 'logs/qorts_{sample}_log.out'
        
    params:
        defaults = config['qorts']
        
    shell:
        'qorts -Xmx16g -Xms8g QC {params.defaults} --runFunctions writeKnownSplices,writeNovelSplices,writeSpliceExon {input.bam} {input.gtf} {output} 1>> {log.out} 2>> {log.err}'

        
rule qualimap:
    input:
        bam = os.path.join(config['samdir'], '{sample}.bam'),
        gtf = GTF
    output:
        'qualimap/{sample}'
    log:
        err = 'logs/qualimap_{sample}_log.err',
        out = 'logs/qualimap_{sample}_log.out'
    shell:
        'qualimap rnaseq --java-mem-size=16G -bam {input} -gtf {input.gtf} -outdir {output} 1>> {log.out} 2>> {log.err}'


rule featureCount:
    input:
        bams = expand(os.path.join(config['samdir'], '{sample}.bam'), sample=SAMPLE),
        gtf = GTF
    output:
        'featureCount/counts'
    log:
        err = 'logs/featureCount_log.err',
        out = 'logs/featureCount_log.out'
    threads: 1
    params:
        defaults = config['featureCount']
    shell:
        'featureCounts -T {threads} {params.defaults} -a {input.gtf} -o {output} {input.bams} 1>> {log.out} 2>> {log.err}'


rule multiqc:
    output:
        'multiqc_report.html'
    shell:
        'multiqc .'
        
# rule rseqc_read_distribution:
#     input:
#         bam = os.path.dirname(SAMFILES) + '/{sample}.bam',
#         bed = BED
#     output:
#         'logs/rseqc_rd_{sample}_log.out'

#     log:
#         err = 'logs/rseqc_rd_log.err',

#     shell:
#         'read_distribution.py -i {input.bam} -r {input.bed} 1>> {output} 2>> {log.err}'
        
        
    
# rule sort:
#     input:
#         os.path.dirname(SAMFILES) + '/{sample}.bam'

#     output:
#         '{sample}_sorted.bam'

#     params:
#         'coordinate'

#     log:
#         err = 'picard_test.err',
#         out = 'picard_test.out'

#     shell:
#         'picard SortSam I={input} O={output} SO={params} 1>>{log.out} 2>>{log.err}'
